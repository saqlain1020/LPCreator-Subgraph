// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get _pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _token1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _token2(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LiquidityPoolFactory extends ethereum.SmartContract {
  static bind(address: Address): LiquidityPoolFactory {
    return new LiquidityPoolFactory("LiquidityPoolFactory", address);
  }

  createPool(
    _token1: Address,
    _token2: Address,
    _name1: string,
    _name2: string
  ): Address {
    let result = super.call(
      "createPool",
      "createPool(address,address,string,string):(address)",
      [
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromAddress(_token2),
        ethereum.Value.fromString(_name1),
        ethereum.Value.fromString(_name2)
      ]
    );

    return result[0].toAddress();
  }

  try_createPool(
    _token1: Address,
    _token2: Address,
    _name1: string,
    _name2: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createPool",
      "createPool(address,address,string,string):(address)",
      [
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromAddress(_token2),
        ethereum.Value.fromString(_name1),
        ethereum.Value.fromString(_name2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPool(_token1: Address, _token2: Address): Address {
    let result = super.call("getPool", "getPool(address,address):(address)", [
      ethereum.Value.fromAddress(_token1),
      ethereum.Value.fromAddress(_token2)
    ]);

    return result[0].toAddress();
  }

  try_getPool(
    _token1: Address,
    _token2: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPool",
      "getPool(address,address):(address)",
      [ethereum.Value.fromAddress(_token1), ethereum.Value.fromAddress(_token2)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokensToPool(param0: Address, param1: Address): Address {
    let result = super.call(
      "tokensToPool",
      "tokensToPool(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toAddress();
  }

  try_tokensToPool(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokensToPool",
      "tokensToPool(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get _token1(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token2(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _name1(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _name2(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
